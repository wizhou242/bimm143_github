---
title: "Class7: Machine Learning 1"
author: "Winnie Zhou (A16673200)"
format: pdf
---

Today we will start our multi-part exploration of some key machine learning methods. We will begin with clustering - finding groupings in data, and the dimensionality reduction.


##Clustering

Let's start with "k-means" clustering.
The main funtion in base R for this `kmeans()`.

```{r}
# Make up some data
hist(rnorm(100000, mean=3))
```


```{r}
tmp <- c(rnorm(30, -3), rnorm(30, +3))
x <- cbind(x=tmp, y=rev(tmp))
plot(x)
```

Now let's try out `kmeans()`

```{r}
km <- kmeans(x, centers=2)
km
```

```{r}
attributes(km)
```

> Q. How many points in each cluster?

```{r}
km$size
```

> Q. What component of your result object details cluster assignment/membership?

```{r}
km$cluster
```

> Q. What are the centers/mean values of each cluster?

```{r}
km$centers
```

> Q. Make a plot of your data showing your clustering results.

```{r}
plot(x, col= "blue")
```

```{r}
plot(x,col=c(1,2))
```

```{r}
plot(x,col=km$cluster)
points(km$centers, col="blue", pch=15, cex=3)
```


> Q. Run `kmeans()` again and cluster in 4 groups and plot the results.

```{r}
km4 <- kmeans(x, centers = 4)
km4
plot(x, col=km4$cluster)
```

## Hierarchical clustering

This form of clustering aims to reveal the structure in your data by progressively grouping points into a ever smaller number of clusters.

The main function in base R for this called `hclust()`. This function doesnot take our input data directly but wants a "distance matrix" that details how (dis)similar all our input points are to each other.


```{r}
hc <- hclust(dist(x))
hc
```

The print out above is not very useful (unlike that from kmenas) but there is a useful `plot()` method.

```{r}
plot(hc)
abline(h=10, col="red")
```

To get my main result (my cluster membership vector) I need to "cut" my tree using the function `cutree()`

```{r}
grps <- cutree(hc, h=10)
grps
```

```{r}
plot(x, col=grps)
```

```{r}
plot(x, col=cutree(hc, h=4))
```




# Principal Component Analysis (PCA)

The goal of PCA is to reduce the dimensionality of a dataset down to some smaller subset of new variables (called PCs) that are a useful base for further analysis, like visualization, clustering, etc. 

```{r}
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url, row.names = 1)
x
```

> Q1. How many rows and columns are in your new data frame named x? What R functions could you use to answer this questions?

## Complete the following code to to find out how many rows and columns are in x?
```{r}
dim(x)
```

## Preview the first 6 rows
```{r}
head(x)
```

```{r}
barplot(as.matrix(x), beside =T, col=rainbow(nrow(x)))
```

The so called "pairs" plot can be useful for small datasets:

```{r}
#rainbow(nrow(x))
pairs(x, col=rainbow(nrow(x)), pch=16)
```

So the paris plot is useful for small datasets but it can be lotsof work to interpret and gets untraceable for larger datasets.


So PCA to the rescue....

The main function to do PCA in base R is called `prcomp()`. This function wants the transpose of our data in this case.

```{r}
pca <- prcomp(t(x))
summary(pca)
```

```{r}
attributes(pca)
```

```{r}
pca$x
```

A major PCA result viz is called a "PCA plot" (aka a score plot, biplot, PC1 vs PC2 plot, ordination plot)

```{r}
mycols <- c("orange", "red", "blue", "darkgreen")
plot(pca$x[,1], pca$x[,2], col=mycols, pch=16,
     xlab="PC1", ylab="PC2")
```
Another important output from PCA is called the "loadings" vector or the "rotation" component - the tells us how much the original variables (the foods in this case) contribute to the new PCs.

```{r}
pca$rotation
```

PCA looks to be a super useful method for gaining some insight into high dimensional data that is difficult to examine in other ways.


# PCA of RNASeq data

## Data input

```{r}
url2 <- "https://tinyurl.com/expression-CSV"
rna.data <- read.csv(url2, row.names=1)
head(rna.data)
```

```{r}
## Again we have to take the transpose of our data 
pca <- prcomp(t(rna.data), scale=TRUE)
```

```{r}
summary(pca)
```

> Q. How many genes in this dataset?

```{r}
nrow(rna.data)
```

```{r}
attributes(pca)
```

```{r}
head(pca$x)
```

I will make a main result figure use ggplot:

```{r}
library(ggplot2)
```

```{r}
res <- as.data.frame(pca$x)
```

```{r}
head(res)
```

```{r}
mycols <- c(rep("blue", 5), rep("red", 5))
mycols
```


```{r}
ggplot(res) +
  aes(PC1,PC2) +
  geom_point()
```

```{r}
colnames(rna.data)
```

```{r}
kmeans(pca$x[,1], centers=2)
```






























