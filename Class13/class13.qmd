---
title: "Class 13: RNA-Seq data analysis"
author: "Winnie Zhou (A16673200)"
format: pdf
---

The data for today's lab comes from a published RNA-seq experiment where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects.

## Import Data

We need two things for this analysis: counts and metadata there are called "countData" and "colData" in the DESeq2 world.

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```


```{r}
head(counts)
```

The counts are organized with a gene per row and experiment per column.

```{r}
head(metadata)
```


> Q1. How many genes are in this dataset? 

```{r}
nrow(counts)
```


> Q2. How many ‘control’ cell lines do we have?

```{r}
sum(metadata$dex=="control")
```

We can also use `table()` function for this question.

```{r}
table(metadata$dex)
```

### Check on match of metadata and coldata

```{r}
colnames(counts)
```


```{r}
metadata$id
```

```{r}
colnames(counts)==metadata$id
```

If you want to know that all the elements of a vector are TRUE we can use the `all()` function.

```{r}
all(c(T,T,T,F))
```
```{r}
all(colnames(counts)==metadata$id)
```

## Analysis

I want to start by comparing "control" and "treated" columns. To do this I will find the average for each gene (row) in all "control" columns. Then I will find the average in the "treated" columns. Then I will compare them.

Let's extract all "control" columns first.

```{r}
control.inds <- metadata$dex=="control"
```

```{r}
control.counts <- counts[,control.inds]
```

Now find the mean count value per gene using the `apply()` function.

```{r}
control.mean <- apply(control.counts, 1, mean)
```

Now let's extract all "treated" columns.

```{r}
treated.inds <- metadata$dex=="treated"
```

```{r}
treated.counts <- counts[,treated.inds]
```

Now find the mean count value per gene using the `apply()` function.

```{r}
#/ message: false
treated.mean <- apply(treated.counts, 1, mean)
```

Simplified version:
```{r}
head(apply(counts[,metadata$dex=="treated"],1,mean))
```

Put these 2 mean vectors together for ease of book keeping

```{r}
meancounts <- data.frame(control.mean, treated.mean)
head(meancounts)
```

Let's have a little look with a quick plot.

```{r}
plot(meancounts)
```

```{r}
plot(meancounts, log="xy")
```

```{r}
log(10, base=2)
```

```{r}
log2(10/10)
```

```{r}
log2(20/10)
```

```{r}
log2(10/20)
```

```{r}
log2(40/10)
```

We most often work in log2 units because they have a more simple interpretation.

Here we calculare the log2 Fold-change of treated/control values and add it to our small data frame of results.

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean/meancounts$control.mean)
head(meancounts)
```

There are some funky answers in here like NaN (Not a number) and -Inf (minus infinity) that all come because I have a zero count genes in my dataset.


It is common practice to filter these zero count genes out before we go too deep.

```{r}
to.keep.inds <- (rowSums(meancounts[,1:2]==0) ==0)

mycounts <- meancounts[to.keep.inds,]
head(mycounts)
```

> Q. How many gens do we have left after zero count filtering?

```{r}
nrow(mycounts)
```

A common threshold for calling a gene 'up' or 'down' is a log2 fold change of +2 or -2.

> Q.  How many "up" regulated genes do we have?

```{r}
sum(mycounts$log2fc >= +2)
```

## DESeq analysis 

We need to do this analysis properly with our inner stats person kept happy

```{r}
#/ message: false
library(DESeq2)
```

To use DESeq we need to get our input data in very particular format.

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts,
                       colData = metadata,
                       design = ~dex)
```

Run DESeq analysis
```{r}
dds <- DESeq(dds)
```
Get the results
```{r}
res <- results(dds)
head(res)
```

I want to make a figure showing an overview of all my results to date.
A plot of **log2 fold change** vs the **p-value** (adjusted p-value)

```{r}
plot(res$log2FoldChange, -log(res$padj), xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")
abline(v=-2, col="gray")
abline(v=2, col="gray")
abline(h=-log(0.05), col="gray")
```

Let's give the plot some color.
```{r}
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "blue" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "magenta"
```

```{r}
plot(res$log2FoldChange, -log(res$padj), xlab="Log2(FoldChange)",
      ylab="-Log(P-value)", col=mycols)
abline(v=-2, col="gray")
abline(v=2, col="gray")
abline(h=-log(0.05), col="gray")
```

## Add annotation data

Wee want to add on gene symbols (i.e. gene names) as well as other common identifiers from major databases for all our genes of interest.

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```
We can translate between the following IDs:

```{r}
columns(org.Hs.eg.db)
```

```{r}
head(res)
```

My IDs are in the `rownames(res)` and they are from ENSEMBL

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=rownames(res),
                     keytype="ENSEMBL", # The format of our genenames
                     column="SYMBOL",   # The new format we want to add
                     multiVals = "first")
head(res)
```

We also want "GENENAME" and "ENTREZID" 

```{r}
res$genename <- mapIds(org.Hs.eg.db,
                     keys=rownames(res),
                     keytype="ENSEMBL", # The format of our genenames
                     column="GENENAME",   # The new format we want to add
                     multiVals = "first")
head(res)
```

```{r}
res$entrezid <- mapIds(org.Hs.eg.db,
                     keys=rownames(res),
                     keytype="ENSEMBL", # The format of our genenames
                     column="ENTREZID",   # The new format we want to add
                     multiVals = "first")
head(res)
```

Let's save our results to a new CSV file

```{r}
write.csv(res, file="ourresults.csv")
```


## Pathway Analysis

Here we will use the "gage" package to do some pathway analysis (aka geneset enrichment).

```{r}
library(pathview)
library(gage)
library(gageData)
```

Have a small peek at KEGG data
```{r}
data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

To run gage we need to provide it with a vector of fold-change values (not our big full results table).

```{r}
foldchanges <- res$log2FoldChange
#foldchanges
```

Add the ENTREZ ids as names to this vector.

```{r}
c(chandra = 10, alice = 9, barry = 7)
```

```{r}
x <- c(10, 9, 7)
names(x) <- c("chandra", "alice", "barry")
```

```{r}
names(foldchanges) <- res$entrezid
head(foldchanges)
```

Now run **gage** with this input and the KEGG pathways.

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
attributes(keggres)
```
```{r}
head(keggres$less)
```

Let's have a look at the hsa05310 Asthma pathway with our genes highlighted using the `pathview()` function:

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![](hsa05310.pathview.png)
































